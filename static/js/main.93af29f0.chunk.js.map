{"version":3,"sources":["components/recipedetails.js","components/recipe.js","components/alert.js","App.js","serviceWorker.js","index.js"],"names":["RecipeDetails","ingredients","map","ingredient","key","uuidv4","className","text","weight","Recipe","recipe","useState","show","setShow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","query","setQuery","recipes","setRecipes","setAlert","getData","a","Axios","get","result","data","more","console","log","hits","onSubmit","e","preventDefault","type","name","placeholder","value","autoComplete","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAceA,G,MAXO,SAAC,GACrB,OADyC,EAAlBC,YACJC,KAAI,SAAAC,GACrB,OACE,wBAAIC,IAAKC,cAAUC,UAAU,mBAC3B,wBAAIA,UAAU,mBAAmBH,EAAWI,MAC5C,wBAAID,UAAU,qBAAd,YAA4CH,EAAWK,cCWhDC,EAhBA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAAY,EACDC,oBAAS,GADR,mBAClBC,EADkB,KACZC,EADY,OAEYH,EAAOA,OAArCI,EAFkB,EAElBA,MAAMC,EAFY,EAEZA,MAAMC,EAFM,EAENA,IAAIf,EAFE,EAEFA,YACvB,OACI,yBAAKK,UAAU,UACX,4BAAKQ,GACL,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,uBAAGK,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAAlC,OAGA,4BAAQC,QAAS,kBAAMT,GAASD,KAAhC,eACCA,GAAQ,kBAAC,EAAD,CAAeX,YAAaA,MCJlCsB,EARD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,yBAAKlB,UAAU,SACb,4BAAKkB,KCgDIC,MA9Cf,WAAgB,IAAD,EACUd,mBAAS,IADnB,mBACNe,EADM,KACAC,EADA,OAEchB,mBAAS,IAFvB,mBAENiB,EAFM,KAEEC,EAFF,OAGalB,mBAAS,IAHtB,mBAGNa,EAHM,KAGCM,EAHD,KAOPd,EAAI,mCAAD,OAAoCU,EAApC,mBAFA,WAEA,oBADC,oCAOJK,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVN,EADU,iCAESO,IAAMC,IAAIlB,GAFnB,WAENmB,EAFM,QAGAC,KAAKC,KAHL,yCAIHP,EAAS,2BAJN,OAMZQ,QAAQC,IAAIJ,GACZN,EAAWM,EAAOC,KAAKI,MACvBb,EAAS,IACTG,EAAS,IATG,wBAWZA,EAAS,wBAXG,4CAAH,qDAkBb,OACE,yBAAKxB,UAAU,OACb,2CACA,0BAAMA,UAAU,SAASmC,SAPZ,SAAAC,GACfA,EAAEC,iBACFZ,MAMe,KAAVP,GAAgB,kBAAC,EAAD,CAAOA,MAAOA,IAC/B,2BAAOoB,KAAK,OAAOC,KAAK,QAAQC,YAAY,cAAcC,MAAOrB,EAAOsB,aAAa,MAAMC,SA3BhF,SAACP,GAChBf,EAASe,EAAEtB,OAAO2B,UA2Bd,2BAAOH,KAAK,SAASG,MAAM,YAE7B,yBAAKzC,UAAU,WACdsB,IAAU,IAAMA,EAAQ1B,KAAI,SAAAQ,GAAM,OAAI,kBAAC,EAAD,CAAQN,IAAKC,cAAUK,OAAQA,UCnCxDwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.93af29f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst RecipeDetails = ({ ingredients }) => {\r\n  return ingredients.map(ingredient => {\r\n    return (\r\n      <ul key={uuidv4()} className=\"ingredient-list\">\r\n        <li className=\"ingredient-text\">{ingredient.text}</li>\r\n        <li className=\"ingredient-weight\">Weight - {ingredient.weight}</li>\r\n      </ul>\r\n    );\r\n  });\r\n};\r\n\r\nexport default RecipeDetails;","import React,{useState} from 'react'\r\nimport RecipeDetails from './recipedetails';\r\n\r\nconst Recipe = ({recipe}) => {\r\n    const [show, setShow] = useState(false);\r\n    const {label,image,url,ingredients} =recipe.recipe;\r\n    return (\r\n        <div className=\"recipe\">\r\n            <h2>{label}</h2>\r\n            <img src={image} alt={label} />\r\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                URL\r\n            </a>\r\n            <button onClick={() => setShow(!show)}>Ingredients</button>\r\n            {show && <RecipeDetails ingredients={ingredients} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe\r\n","import React from \"react\";\r\n\r\nconst Alert = ({ alert }) => {\r\n  return (\r\n    <div className=\"alert\">\r\n      <h3>{alert}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;","import React, {useState} from 'react';\nimport {v4 as uuidv4} from 'uuid'; \nimport Axios from 'axios';\nimport './App.css';\nimport Recipe from './components/recipe';\nimport Alert from \"./components/alert\"; \n\nfunction App() {\n  const [query,setQuery]=useState(\"\");\n  const [recipes,setRecipes]=useState([]);\n  const [alert, setAlert] = useState(\"\");\n\n  const id=\"6e7951a3\";\n  const key=\"9e534021fdd72f75b55c473eb31f5c0b\"\n  const url=`https://api.edamam.com/search?q=${query}&app_id=${id}&app_key=${key}`;\n\n  const onChange = (e) =>{\n    setQuery(e.target.value);\n  }\n\n  const getData = async() =>{\n    if (query !== \"\") {\n      const result = await Axios.get(url);\n      if (!result.data.more) {\n        return setAlert(\"No food with such name\");\n      }\n      console.log(result);\n      setRecipes(result.data.hits);\n      setQuery(\"\");\n      setAlert(\"\");\n    } else {\n      setAlert(\"Please fill the form\");\n    }\n  }\n  const onSubmit = e =>{\n    e.preventDefault();\n    getData();\n  }\n  return (\n    <div className=\"App\">\n      <h1>SEARCH FOOD</h1>\n      <form className=\"search\" onSubmit={onSubmit}>\n        {alert !== \"\" && <Alert alert={alert} />}\n        <input type=\"text\" name=\"query\" placeholder=\"Search Food\" value={query} autoComplete=\"off\" onChange={onChange}/>\n        <input type=\"submit\" value=\"Search\"/>\n      </form>\n      <div className=\"recipes\">\n      {recipes!==[] && recipes.map(recipe => <Recipe key={uuidv4()} recipe={recipe} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}